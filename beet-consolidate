#!/usr/bin/python3
import os, os.path, re, shutil, filecmp, beets
  
def clean(s):
    return s.replace(":","_").replace("?","_").replace("/","_")

class AlbumRow:
    def __init__(self,row_id,artist_name,album_name):
        self.row_id = row_id
        self.artist_name = artist_name
        self.album_name = album_name

    def clean_artist_name(self):
        if self.artist_name == "Various Artists":
            return "Compilations"
        else:
            return clean(self.artist_name)

    def path(self,with_row):
        albumpath = clean(self.album_name)
        if with_row:
            albumpath = albumpath + " " + str(self.row_id)
        return os.path.join(self.clean_artist_name(),albumpath)

    def desc(self):
        return str(self.row_id)+": "+self.artist_name+"/"+self.album_name

with beets.connect() as conn:
    
    def merge(album_guid,p,q):
    
        prelpath = p.path(False)
        ppath = os.path.join(beets.dirpath,prelpath)
        if not os.path.isdir(ppath):
            return False
        qrelpath = q.path(True)
        qpath = os.path.join(beets.dirpath,qrelpath)
        if not os.path.isdir(qpath):
            return False
        
        print ("Merging " + album_guid + ":")
        print ("  " + qrelpath)
        print ("  into")
        print ("  " + prelpath)

        filenames = sorted(os.listdir(qpath))
        # scan for collisions first and remove duplicates
        collisions = False
        for fname in filenames:
            qfpath = os.path.join(qpath,fname)
            if fname == "album.nfo":
                pass
            else:
                pfpath = os.path.join(ppath,fname)
                if os.path.isfile(pfpath):
                    if filecmp.cmp(pfpath,qfpath):
                        print ("Duplicate: "+fname)
                    else:
                        print ("Collision: "+fname)
                        collisions = True
                else:
                    print ("Movable: "+fname)

        if collisions:
            print ("Collisions, not merging")
        else:
            print ("Merging...")
            for fname in filenames:
                qfpath = os.path.join(qpath,fname)
                if fname == "album.nfo":
                    os.remove(qfpath)
                else:
                    pfpath = os.path.join(ppath,fname)
                    if os.path.isfile(pfpath):
                        os.remove(qfpath)
                    else:
                        os.rename(qfpath,pfpath)
            conn.execute("UPDATE items SET album_id=? WHERE album_id=?",[p.row_id,q.row_id])
            
            os.rmdir(qpath)
            conn.execute("DELETE FROM albums WHERE id=?",[q.row_id])
            conn.commit()
        return True
        
    
    for (album_guid,a_id,a_artist,a_album,b_id,b_artist,b_album) in conn.execute("SELECT a.mb_albumid, a.id, a.albumartist, a.album, b.id, b.albumartist, b.album FROM albums AS a, albums AS b WHERE a.mb_albumid = b.mb_albumid AND b.id > a.id"):

        a = AlbumRow(a_id,a_artist,a_album)
        b = AlbumRow(b_id,b_artist,b_album)

        if merge(album_guid,a,b):
            pass
        elif merge(album_guid,b,a):
            pass
        else:
            print ("Couldn't match:")
            print ("  "+a.desc())
            print ("  "+b.desc())
